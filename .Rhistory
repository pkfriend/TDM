model_pop <- c(vancomycin_pop, cyclosporin_pop)
vancomycin_ind <- readRDS("Model/vancomycin_ind.rds")
cyclosporin_ind <- readRDS("Model/cyclosporin_ind.rds")
model_ind <- c(vancomycin_ind,cyclosporin_ind)
model_name <- "vancomycin1_1"
input_data <- jsonlite::fromJSON("input_dataset.json")
# json data에서
tdm_data <- input_data$dataset |>
as_tibble()
# nlmixr2으로 POSTHOC EBE 계산
fit <- nlmixr2(model_nlmixr[[model_name]], tdm_data, est="posthoc")
View(fit)
# 10 반감기 계산
halflife <- fit |>
distinct(K) |>
mutate(K = log(2)/K*10) |>
as_vector()
# 현재 dataset에서 마지막시간 가져오기
last_time <- max(tdm_data$TIME)
# 10반감기 까지 dosing 횟수 올림 게산
pred_number <- ceiling( halflife/input_data$input_tau)
# 10반감기 포함하는 tdm data셋 생성
covariate <- tibble(
WT     = input_data$input_WT,
CRCL = input_data$input_CRCL,
AGE = input_data$input_AGE,
SEX = input_data$input_SEX,
TOXI = input_data$input_TOXI,
AUC = input_data$input_AUC,
CTROUGH = input_data$input_CTROUGH
)
#Population Mean Simulation
model_pop <- model_pop[[paste0(model_name,"_pop")]]
model_pop <- model_pop |>
param(covariate)
#10반감기 까지 simdata 생성
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = tdm_data[nrow(tdm_data),]$AMT)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = input_data$input_amount
)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
sim_data <- tdm_data  |>
bind_rows(temp) |>
filter(EVID ==1)
event <- ev(amt = sim_data[sim_data$EVID==1,]$AMT, time = sim_data[sim_data$EVID==1,]$TIME)
PRED_CONC <- model_pop |>
ev(event) |>
mrgsim(end = last_time+(input_data$`input_tau`*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID ==0) |>
select(time, IPRED)
#Individual SImulation
model_ind <- model_ind[[paste0(model_name,"_ind")]]
idata <- fit |>
distinct(ID,.keep_all = TRUE) |>
as_tibble()
model_ind <- model_ind |>
param(idata)
IPRED_CONC <- model_ind |>
ev(event) |>
mrgsim(end = last_time+(input_data$input_tau*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID == 0) |>
select(time, IPRED)
tdm_clean <- tdm_data |>
mutate(DV = as.numeric(DV)) |>
filter(!is.na(DV), !is.na(TIME), is.finite(DV), is.finite(TIME))
ggplot()  + geom_line(data = IPRED_CONC,aes(x = time, y = IPRED, color = "IPRED")) + geom_line(data = PRED_CONC, aes(x = time, y = IPRED, color = "PRED")) +
geom_point(data = tdm_clean |> mutate(DV = as.double(DV)), aes(x = TIME, y = DV)) +theme_light()
model_name <- "cyclosporin3"
# json data에서
tdm_data <- input_data$dataset |>
as_tibble()
# nlmixr2으로 POSTHOC EBE 계산
fit <- nlmixr2(model_nlmixr[[model_name]], tdm_data, est="posthoc")
model_name <- "vancomycin2_1"
# json data에서
tdm_data <- input_data$dataset |>
as_tibble()
# nlmixr2으로 POSTHOC EBE 계산
fit <- nlmixr2(model_nlmixr[[model_name]], tdm_data, est="posthoc")
# 10 반감기 계산
halflife <- fit |>
distinct(k10) |>
mutate(K = log(2)/k10*10) |>
as_vector()
# 현재 dataset에서 마지막시간 가져오기
last_time <- max(tdm_data$TIME)
# 10반감기 까지 dosing 횟수 올림 게산
pred_number <- ceiling( halflife/input_data$input_tau)
# 10반감기 포함하는 tdm data셋 생성
covariate <- tibble(
WT     = input_data$input_WT,
CRCL = input_data$input_CRCL,
AGE = input_data$input_AGE,
SEX = input_data$input_SEX,
TOXI = input_data$input_TOXI,
AUC = input_data$input_AUC,
CTROUGH = input_data$input_CTROUGH
)
#Population Mean Simulation
model_pop <- model_pop[[paste0(model_name,"_pop")]]
model_pop <- model_pop |>
param(covariate)
#10반감기 까지 simdata 생성
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = tdm_data[nrow(tdm_data),]$AMT)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = input_data$input_amount
)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
sim_data <- tdm_data  |>
bind_rows(temp) |>
filter(EVID ==1)
event <- ev(amt = sim_data[sim_data$EVID==1,]$AMT, time = sim_data[sim_data$EVID==1,]$TIME)
PRED_CONC <- model_pop |>
ev(event) |>
mrgsim(end = last_time+(input_data$`input_tau`*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID ==0) |>
select(time, IPRED)
#Individual SImulation
model_ind <- model_ind[[paste0(model_name,"_ind")]]
idata <- fit |>
distinct(ID,.keep_all = TRUE) |>
as_tibble()
model_ind <- model_ind |>
param(idata)
IPRED_CONC <- model_ind |>
ev(event) |>
mrgsim(end = last_time+(input_data$input_tau*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID == 0) |>
select(time, IPRED)
tdm_clean <- tdm_data |>
mutate(DV = as.numeric(DV)) |>
filter(!is.na(DV), !is.na(TIME), is.finite(DV), is.finite(TIME))
ggplot()  + geom_line(data = IPRED_CONC,aes(x = time, y = IPRED, color = "IPRED")) + geom_line(data = PRED_CONC, aes(x = time, y = IPRED, color = "PRED")) +
geom_point(data = tdm_clean |> mutate(DV = as.double(DV)), aes(x = TIME, y = DV)) +theme_light()
input_data <- jsonlite::fromJSON("input_dataset.json")
# json data에서
tdm_data <- input_data$dataset |>
as_tibble()
# nlmixr2으로 POSTHOC EBE 계산
fit <- nlmixr2(model_nlmixr[[model_name]], tdm_data, est="posthoc")
# 10 반감기 계산
halflife <- fit |>
distinct(k10) |>
mutate(K = log(2)/k10*10) |>
as_vector()
# 현재 dataset에서 마지막시간 가져오기
last_time <- max(tdm_data$TIME)
# 10반감기 까지 dosing 횟수 올림 게산
pred_number <- ceiling( halflife/input_data$input_tau)
# 10반감기 포함하는 tdm data셋 생성
covariate <- tibble(
WT     = input_data$input_WT,
CRCL = input_data$input_CRCL,
AGE = input_data$input_AGE,
SEX = input_data$input_SEX,
TOXI = input_data$input_TOXI,
AUC = input_data$input_AUC,
CTROUGH = input_data$input_CTROUGH
)
#Population Mean Simulation
model_pop <- model_pop[[paste0(model_name,"_pop")]]
model_pop <- model_pop |>
param(covariate)
#10반감기 까지 simdata 생성
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = tdm_data[nrow(tdm_data),]$AMT)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = input_data$input_amount
)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
sim_data <- tdm_data  |>
bind_rows(temp) |>
filter(EVID ==1)
event <- ev(amt = sim_data[sim_data$EVID==1,]$AMT, time = sim_data[sim_data$EVID==1,]$TIME)
PRED_CONC <- model_pop |>
ev(event) |>
mrgsim(end = last_time+(input_data$`input_tau`*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID ==0) |>
select(time, IPRED)
#Individual SImulation
model_ind <- model_ind[[paste0(model_name,"_ind")]]
idata <- fit |>
distinct(ID,.keep_all = TRUE) |>
as_tibble()
model_ind <- model_ind |>
param(idata)
IPRED_CONC <- model_ind |>
ev(event) |>
mrgsim(end = last_time+(input_data$input_tau*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID == 0) |>
select(time, IPRED)
tdm_clean <- tdm_data |>
mutate(DV = as.numeric(DV)) |>
filter(!is.na(DV), !is.na(TIME), is.finite(DV), is.finite(TIME))
ggplot()  + geom_line(data = IPRED_CONC,aes(x = time, y = IPRED, color = "IPRED")) + geom_line(data = PRED_CONC, aes(x = time, y = IPRED, color = "PRED")) +
geom_point(data = tdm_clean |> mutate(DV = as.double(DV)), aes(x = TIME, y = DV)) +theme_light()
model_name <- "vancomycin1_1"
# json data에서
tdm_data <- input_data$dataset |>
as_tibble()
# nlmixr2으로 POSTHOC EBE 계산
fit <- nlmixr2(model_nlmixr[[model_name]], tdm_data, est="posthoc")
# 10 반감기 계산
halflife <- fit |>
distinct(k10) |>
mutate(K = log(2)/k10*10) |>
as_vector()
# 현재 dataset에서 마지막시간 가져오기
last_time <- max(tdm_data$TIME)
# 10반감기 까지 dosing 횟수 올림 게산
pred_number <- ceiling( halflife/input_data$input_tau)
# 10반감기 포함하는 tdm data셋 생성
covariate <- tibble(
WT     = input_data$input_WT,
CRCL = input_data$input_CRCL,
AGE = input_data$input_AGE,
SEX = input_data$input_SEX,
TOXI = input_data$input_TOXI,
AUC = input_data$input_AUC,
CTROUGH = input_data$input_CTROUGH
)
#Population Mean Simulation
model_pop <- model_pop[[paste0(model_name,"_pop")]]
model_pop <- model_pop |>
param(covariate)
#10반감기 까지 simdata 생성
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = tdm_data[nrow(tdm_data),]$AMT)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = input_data$input_amount
)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
sim_data <- tdm_data  |>
bind_rows(temp) |>
filter(EVID ==1)
event <- ev(amt = sim_data[sim_data$EVID==1,]$AMT, time = sim_data[sim_data$EVID==1,]$TIME)
PRED_CONC <- model_pop |>
ev(event) |>
mrgsim(end = last_time+(input_data$`input_tau`*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID ==0) |>
select(time, IPRED)
#Individual SImulation
model_ind <- model_ind[[paste0(model_name,"_ind")]]
idata <- fit |>
distinct(ID,.keep_all = TRUE) |>
as_tibble()
model_ind <- model_ind |>
param(idata)
IPRED_CONC <- model_ind |>
ev(event) |>
mrgsim(end = last_time+(input_data$input_tau*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID == 0) |>
select(time, IPRED)
tdm_clean <- tdm_data |>
mutate(DV = as.numeric(DV)) |>
filter(!is.na(DV), !is.na(TIME), is.finite(DV), is.finite(TIME))
ggplot()  + geom_line(data = IPRED_CONC,aes(x = time, y = IPRED, color = "IPRED")) + geom_line(data = PRED_CONC, aes(x = time, y = IPRED, color = "PRED")) +
geom_point(data = tdm_clean |> mutate(DV = as.double(DV)), aes(x = TIME, y = DV)) +theme_light()
library(mrgsolve)
library(tidyverse)
library(nlmixr2)
#Vancomycin ----
source("Vancomycin1_1.R")
source("Vancomycin1_2.R")
source("Vancomycin2_1.R")
source("Vancomycin2_2.R")
vancomycin <- list(
vancomycin1_1 = vancomycin1_1,
vancomycin1_2 = vancomycin1_2,
vancomycin2_1 = vancomycin2_1,
vancomycin2_2 = vancomycin2_2
)
vancomycin_ind <- list(
vancomycin1_1_ind = mread_cache("Vancomycin1_1_ind.cpp", soloc = getwd()),
vancomycin1_2_ind = mread_cache("Vancomycin1_2_ind.cpp", soloc = getwd()),
vancomycin2_1_ind = mread_cache("Vancomycin2_1_ind.cpp", soloc = getwd()),
vancomycin2_2_ind = mread_cache("Vancomycin2_2_ind.cpp", soloc = getwd())
)
vancomycin_pop <- list(
vancomycin1_1_pop = mread_cache("Vancomycin1_1_pop.cpp", soloc = getwd()),
vancomycin1_2_pop = mread_cache("Vancomycin1_2_pop.cpp", soloc = getwd()),
vancomycin2_1_pop = mread_cache("Vancomycin2_1_pop.cpp", soloc = getwd()),
vancomycin2_2_pop = mread_cache("Vancomycin2_2_pop.cpp", soloc = getwd())
)
saveRDS(vancomycin, file = "vancomycin_nlmixr2.rds")
saveRDS((vancomycin_ind), "vancomycin_ind.rds")
saveRDS((vancomycin_pop), "vancomycin_pop.rds")
#Cyclosporin ----
source("Cyclosporin1_1.R")
source("cyclosporin1_2.R")
source("Cyclosporin1_3.R")
source("Cyclosporin2.R")
source("Cyclosporin3.R")
cyclosporin <- list(
cyclosporin1_1 = cyclosporin1_1 ,
cyclosporin1_2 =cyclosporin1_2 ,
cyclosporin1_3 = cyclosporin1_3 ,
cyclosporin2 = cyclosporin2,
cyclosporin3 = cyclosporin3
)
cyclosporin_ind <- list(
cyclosporin1_1_ind = mread_cache("cyclosporin1_1_ind.cpp", soloc = getwd()),
cyclosporin1_2_ind = mread_cache("cyclosporin1_2_ind.cpp", soloc = getwd()),
cyclosporin1_3_ind = mread_cache("cyclosporin1_3_ind.cpp", soloc = getwd()),
cyclosporin2_ind = mread_cache("cyclosporin2_ind.cpp", soloc = getwd()),
cyclosporin3_ind = mread_cache("cyclosporin3_ind.cpp", soloc = getwd())
)
cyclosporin_pop <- list(
cyclosporin1_1_pop = mread_cache("cyclosporin1_1_pop.cpp", soloc = getwd()),
cyclosporin1_2_pop = mread_cache("cyclosporin1_2_pop.cpp", soloc = getwd()),
cyclosporin1_3_pop = mread_cache("cyclosporin1_3_pop.cpp", soloc = getwd()),
cyclosporin2_pop = mread_cache("cyclosporin2_pop.cpp", soloc = getwd()),
cyclosporin3_pop = mread_cache("cyclosporin3_pop.cpp", soloc = getwd())
)
saveRDS(cyclosporin, file = "cyclosporin_nlmixr2.rds")
saveRDS(cyclosporin_ind, "cyclosporin_ind.rds")
saveRDS(cyclosporin_pop, "cyclosporin_pop.rds")
setwd("~/TDM/Model")
library(mrgsolve)
library(tidyverse)
library(nlmixr2)
#Vancomycin ----
source("Vancomycin1_1.R")
source("Vancomycin1_2.R")
source("Vancomycin2_1.R")
source("Vancomycin2_2.R")
vancomycin <- list(
vancomycin1_1 = vancomycin1_1,
vancomycin1_2 = vancomycin1_2,
vancomycin2_1 = vancomycin2_1,
vancomycin2_2 = vancomycin2_2
)
vancomycin_ind <- list(
vancomycin1_1_ind = mread_cache("Vancomycin1_1_ind.cpp", soloc = getwd()),
vancomycin1_2_ind = mread_cache("Vancomycin1_2_ind.cpp", soloc = getwd()),
vancomycin2_1_ind = mread_cache("Vancomycin2_1_ind.cpp", soloc = getwd()),
vancomycin2_2_ind = mread_cache("Vancomycin2_2_ind.cpp", soloc = getwd())
)
vancomycin_pop <- list(
vancomycin1_1_pop = mread_cache("Vancomycin1_1_pop.cpp", soloc = getwd()),
vancomycin1_2_pop = mread_cache("Vancomycin1_2_pop.cpp", soloc = getwd()),
vancomycin2_1_pop = mread_cache("Vancomycin2_1_pop.cpp", soloc = getwd()),
vancomycin2_2_pop = mread_cache("Vancomycin2_2_pop.cpp", soloc = getwd())
)
saveRDS(vancomycin, file = "vancomycin_nlmixr2.rds")
saveRDS((vancomycin_ind), "vancomycin_ind.rds")
saveRDS((vancomycin_pop), "vancomycin_pop.rds")
#Cyclosporin ----
source("Cyclosporin1_1.R")
source("cyclosporin1_2.R")
source("Cyclosporin1_3.R")
source("Cyclosporin2.R")
source("Cyclosporin3.R")
cyclosporin <- list(
cyclosporin1_1 = cyclosporin1_1 ,
cyclosporin1_2 =cyclosporin1_2 ,
cyclosporin1_3 = cyclosporin1_3 ,
cyclosporin2 = cyclosporin2,
cyclosporin3 = cyclosporin3
)
cyclosporin_ind <- list(
cyclosporin1_1_ind = mread_cache("cyclosporin1_1_ind.cpp", soloc = getwd()),
cyclosporin1_2_ind = mread_cache("cyclosporin1_2_ind.cpp", soloc = getwd()),
cyclosporin1_3_ind = mread_cache("cyclosporin1_3_ind.cpp", soloc = getwd()),
cyclosporin2_ind = mread_cache("cyclosporin2_ind.cpp", soloc = getwd()),
cyclosporin3_ind = mread_cache("cyclosporin3_ind.cpp", soloc = getwd())
)
cyclosporin_pop <- list(
cyclosporin1_1_pop = mread_cache("cyclosporin1_1_pop.cpp", soloc = getwd()),
cyclosporin1_2_pop = mread_cache("cyclosporin1_2_pop.cpp", soloc = getwd()),
cyclosporin1_3_pop = mread_cache("cyclosporin1_3_pop.cpp", soloc = getwd()),
cyclosporin2_pop = mread_cache("cyclosporin2_pop.cpp", soloc = getwd()),
cyclosporin3_pop = mread_cache("cyclosporin3_pop.cpp", soloc = getwd())
)
saveRDS(cyclosporin, file = "cyclosporin_nlmixr2.rds")
saveRDS(cyclosporin_ind, "cyclosporin_ind.rds")
saveRDS(cyclosporin_pop, "cyclosporin_pop.rds")
setwd("~/TDM")
library(rxode2)
library(nlmixr2)
library(tidyverse)
library(mrgsolve)
library(NonCompart)
vancomycin_nlmixr <- readRDS("Model/vancomycin_nlmixr2.rds")
cyclosporin_nlmxir <- readRDS("Model/cyclosporin_nlmixr2.rds")
model_nlmixr <- c(vancomycin_nlmixr, cyclosporin_nlmxir)
vancomycin_pop <- readRDS("Model/vancomycin_pop.rds")
cyclosporin_pop <- readRDS("Model/cyclosporin_pop.rds")
model_pop <- c(vancomycin_pop, cyclosporin_pop)
vancomycin_ind <- readRDS("Model/vancomycin_ind.rds")
cyclosporin_ind <- readRDS("Model/cyclosporin_ind.rds")
model_ind <- c(vancomycin_ind,cyclosporin_ind)
input_data <- jsonlite::fromJSON("input_dataset.json")
model_name <- "vancomycin1_1"
# json data에서
tdm_data <- input_data$dataset |>
as_tibble()
# nlmixr2으로 POSTHOC EBE 계산
fit <- nlmixr2(model_nlmixr[[model_name]], tdm_data, est="posthoc")
View(fit)
# 10 반감기 계산
halflife <- fit |>
distinct(k10) |>
mutate(K = log(2)/k10*10) |>
as_vector()
# 현재 dataset에서 마지막시간 가져오기
last_time <- max(tdm_data$TIME)
# 10반감기 까지 dosing 횟수 올림 게산
pred_number <- ceiling( halflife/input_data$input_tau)
# 10반감기 포함하는 tdm data셋 생성
covariate <- tibble(
WT     = input_data$input_WT,
CRCL = input_data$input_CRCL,
AGE = input_data$input_AGE,
SEX = input_data$input_SEX,
TOXI = input_data$input_TOXI,
AUC = input_data$input_AUC,
CTROUGH = input_data$input_CTROUGH
)
#Population Mean Simulation
model_pop <- model_pop[[paste0(model_name,"_pop")]]
model_pop <- model_pop |>
param(covariate)
#10반감기 까지 simdata 생성
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = tdm_data[nrow(tdm_data),]$AMT)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
temp <-  tdm_data[rep(1, pred_number),] |>
mutate(AMT = input_data$input_amount
)
temp$TIME <-  seq(last_time + input_data$input_tau, last_time + input_data$input_tau*pred_number, input_data$input_tau)
sim_data <- tdm_data  |>
bind_rows(temp) |>
filter(EVID ==1)
event <- ev(amt = sim_data[sim_data$EVID==1,]$AMT, time = sim_data[sim_data$EVID==1,]$TIME)
PRED_CONC <- model_pop |>
ev(event) |>
mrgsim(end = last_time+(input_data$`input_tau`*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID ==0) |>
select(time, IPRED)
#Individual SImulation
model_ind <- model_ind[[paste0(model_name,"_ind")]]
idata <- fit |>
distinct(ID,.keep_all = TRUE) |>
as_tibble()
model_ind <- model_ind |>
param(idata)
IPRED_CONC <- model_ind |>
ev(event) |>
mrgsim(end = last_time+(input_data$input_tau*(pred_number+1)), delta = 1/60) |>
as_tibble() |>
filter(EVID == 0) |>
select(time, IPRED)
tdm_clean <- tdm_data |>
mutate(DV = as.numeric(DV)) |>
filter(!is.na(DV), !is.na(TIME), is.finite(DV), is.finite(TIME))
ggplot()  + geom_line(data = IPRED_CONC,aes(x = time, y = IPRED, color = "IPRED")) + geom_line(data = PRED_CONC, aes(x = time, y = IPRED, color = "PRED")) +
geom_point(data = tdm_clean |> mutate(DV = as.double(DV)), aes(x = TIME, y = DV)) +theme_light()
input_data <- jsonlite::fromJSON("input_dataset.json")
model_name <- "vancomycin1_1"
View(idata)
View(input_data)
# json data에서
tdm_data <- input_data$dataset |>
as_tibble()
# nlmixr2으로 POSTHOC EBE 계산
fit <- nlmixr2(model_nlmixr[[model_name]], tdm_data, est="posthoc")
# 10 반감기 계산
halflife <- fit |>
distinct(k10) |>
mutate(K = log(2)/k10*10) |>
as_vector()
# 10 반감기 계산
halflife <- fit |>
distinct(k10) |>
mutate(k10 = log(2)/k10*10) |>
as_vector()
# 현재 dataset에서 마지막시간 가져오기
last_time <- max(tdm_data$TIME)
# 10반감기 까지 dosing 횟수 올림 게산
pred_number <- ceiling( halflife/input_data$input_tau)
# 10반감기 포함하는 tdm data셋 생성
covariate <- tibble(
WT     = input_data$input_WT,
CRCL = input_data$input_CRCL,
AGE = input_data$input_AGE,
SEX = input_data$input_SEX,
TOXI = input_data$input_TOXI,
AUC = input_data$input_AUC,
CTROUGH = input_data$input_CTROUGH
)
#Population Mean Simulation
model_pop <- model_pop[[paste0(model_name,"_pop")]]
#Population Mean Simulation
model_pop <- model_pop[[paste0(model_name,"_pop")]]
model_pop <- model_pop |>
param(covariate)
